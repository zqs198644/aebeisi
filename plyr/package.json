{
  "name": "plyr",
  "version": "1.6.4",
  "description": "A simple, accessible and customizable HTML5, YouTube and Vimeo media player",
  "homepage": "http://plyr.io",
  "main": "src/js/plyr.js",
  "dependencies": {},
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-autoprefixer": "^3.1.0",
    "gulp-concat": "^2.3.3",
    "gulp-gzip": "^1.0.0",
    "gulp-less": "^3.0.5",
    "gulp-clean-css": "^2.0.6",
    "gulp-open": "^2.0.0",
    "gulp-rename": "^1.2.0",
    "gulp-replace": "^0.5.3",
    "gulp-s3": "^0.3.0",
    "gulp-sass": "^2.3.1",
    "gulp-size": "^2.1.0",
    "gulp-svgmin": "^1.2.2",
    "gulp-svgstore": "^5.0.5",
    "gulp-uglify": "^1.5.3",
    "gulp-util": "^3.0.7",
    "run-sequence": "^1.1.5"
  },
  "keywords": [
    "HTML5 Video",
    "HTML5 Audio",
    "Media Player"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/selz/plyr.git"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/selz/plyr/issues"
  },
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Sam Potts",
    "email": "sam@selz.com"
  },
  "readme": "# Plyr\nA simple, accessible and customizable HTML5, YouTube and Vimeo media player.\n\n[Checkout the demo](https://plyr.io)\n\n[![Image of Plyr](https://cdn.plyr.io/static/plyr_v1.6.0.png)](https://plyr.io)\n\n## Why?\nWe wanted a lightweight, accessible and customizable media player that supports [*modern*](#browser-support) browsers. Sure, there are many other players out there but we wanted to keep things simple, using the right elements for the job.\n\n## Features\n- **Accessible** - full support for VTT captions and screen readers\n- **Lightweight** - under 10KB minified and gzipped\n- **[Customisable](#html)** - make the player look how you want with the markup you want\n- **Semantic** - uses the *right* elements. `<input type=\"range\">` for volume and `<progress>` for progress and well, `<button>`s for buttons. There's no `<span>` or `<a href=\"#\">` button hacks\n- **Responsive** - as you'd expect these days\n- **HTML Video & Audio** - support for both formats\n- **[Embedded Video](#embeds)** - support for YouTube and Vimeo video playback\n- **[API](#api)** - toggle playback, volume, seeking, and more\n- **[Universal events](#events)** - no messing around with Vimeo and YouTube APIs, all events are universal across formats\n- **[Fullscreen](#fullscreen)** - supports native fullscreen with fallback to \"full window\" modes\n- **i18n support** - support for internationalization of controls\n- **No dependencies** - written in \"vanilla\" JavaScript, no jQuery required\n\nOh and yes, it works with Bootstrap.\n\n## Changelog\nCheck out the [changelog](changelog.md) to see what's new with Plyr.\n\n## Planned Development\n- Streaming\n- Playback speed\n- Playlists\n- Multiple language captions (with selection)\n- Audio captions\n... and whatever else has been raised in [issues](https://github.com/Selz/plyr/issues)\n\nIf you have any cool ideas or features, please let me know by [creating an issue](https://github.com/Selz/plyr/issues/new) or, of course, forking and sending a pull request.\n\n## Implementation\nCheck `docs/index.html` and `docs/dist/docs.js` for an example setup.\n\n**Heads up:** the example `index.html` file needs to be served from a webserver (such as Apache, Nginx, IIS or similar) unless you change the file sources to include http or https. e.g. change `//cdn.plyr.io/1.6.4/plyr.js` to `https://cdn.plyr.io/1.6.4/plyr.js`\n\n### Node Package Manager (NPM)\n\nUsing NPM, you can grab Plyr:\n```\nnpm install plyr\n```\n[https://www.npmjs.com/package/plyr](https://www.npmjs.com/package/plyr)\n\n### Bower\n\nIf bower is your thang, you can grab Plyr using:\n```\nbower install plyr\n```\n[http://bower.io/search/?q=plyr](http://bower.io/search/?q=plyr)\n\nMore info on setting up dependencies can be found in the [Bower Docs](http://bower.io/docs/creating-packages/#maintaining-dependencies)\n\n### Ember\nThe awesome [@louisrudner](https://twitter.com/louisrudner) has created an ember component, available by running:\n```\nember addon:install ember-cli-plyr\n```\nMore info is on [npm](https://www.npmjs.com/package/ember-cli-plyr) and [GitHub](https://github.com/louisrudner/ember-cli-plyr)\n\n### CDN\nIf you want to use our CDN, you can use the following:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.plyr.io/1.6.4/plyr.css\">\n<script src=\"https://cdn.plyr.io/1.6.4/plyr.js\"></script>\n```\n\nYou can also access the `sprite.svg` file at `https://cdn.plyr.io/1.6.4/sprite.svg`.\n\n### CSS & Styling\nIf you want to use the default css, add the `plyr.css` file from `/dist` into your head, or even better use `plyr.less` or `plyr.scss` file included in `/src` in your build to save a request.\n\n```html\n<link rel=\"stylesheet\" href=\"dist/plyr.css\">\n```\n\nThe default setup uses the BEM methodology with `plyr` as the block, e.g. `.plyr__controls`. You can change the class hooks in the options. Check out the source for more on this.\n\n### SVG\nThe SVG sprite for the controls icons can be loaded two ways:\n- By passing the *relative* path to the sprite as the `iconUrl` option; or\n- Using AJAX, injecting the sprite into a hidden div. \n\n#### Using the `iconUrl` option\nThis method requires the SVG sprite to be hosted on the *same domain* as your page hosting the player. Currently no browser supports cross origin SVG sprites due to XSS issues. Fingers crossed this will come soon though. An example value for this option would be:\n```\n/path/to/sprite.svg\n```\n\n#### Using AJAX\nUsing AJAX means you can load the sprite from a different origin. Avoiding the issues above. This is an example script to load an SVG sprite best added before the closing `</body>`, before any other scripts.\n\n```html\n<script>\n(function(d, p){\n\tvar a = new XMLHttpRequest(),\n\t\tb = d.body;\n\ta.open('GET', p, true);\n\ta.send();\n\ta.onload = function() {\n\t\tvar c = d.createElement('div');\n\t\tc.setAttribute('hidden', '');\n\t\tc.innerHTML = a.responseText;\n\t\tb.insertBefore(c, b.childNodes[0]);\n\t};\n})(document, 'https://cdn.plyr.io/1.6.4/sprite.svg');\n</script>\n```\n\nIf you're using the `<base>` tag on your site, you may need to use something like this:\n[svgfixer.js](https://gist.github.com/leonderijke/c5cf7c5b2e424c0061d2)\n\nMore info on SVG sprites here:\n[http://css-tricks.com/svg-sprites-use-better-icon-fonts/](http://css-tricks.com/svg-sprites-use-better-icon-fonts/)\nand the AJAX technique here:\n[http://css-tricks.com/ajaxing-svg-sprite/](http://css-tricks.com/ajaxing-svg-sprite/)\n\n### HTML\nThe only extra markup that's needed to use plyr is a `<div>` wrapper. Replace the source, poster and captions with urls for your media.\n```html\n<div class=\"plyr\">\n\t<video poster=\"/path/to/poster.jpg\" controls>\n\t\t<!-- Video files -->\n\t\t<source src=\"/path/to/video.mp4\" type=\"video/mp4\">\n\t\t<source src=\"/path/to/video.webm\" type=\"video/webm\">\n\n\t\t<!-- Text track file -->\n\t\t<track kind=\"captions\" label=\"English captions\" src=\"/path/to/captions.vtt\" srclang=\"en\" default>\n\n\t\t<!-- Fallback for browsers that don't support the <video> element -->\n\t\t<a href=\"/path/to/movie.mp4\">Download</a>\n\t</video>\n</div>\n```\nAnd the same for `<audio>`\n\n```html\n<div class=\"plyr\">\n\t<audio controls>\n\t\t<!-- Audio files -->\n\t\t<source src=\"/path/to/audio.mp3\" type=\"audio/mp3\">\n\t\t<source src=\"/path/to/audio.ogg\" type=\"audio/ogg\">\n\n\t\t<!-- Fallback for browsers that don't support the <audio> element -->\n\t\t<a href=\"/path/to/audio.mp3\">Download</a>\n\t</audio>\n</div>\n```\n\nFor YouTube and Vimeo, Plyr uses the standard YouTube API markup (an empty `<div>`):\n\n```html\n<div class=\"plyr\">\n\t<div data-video-id=\"bTqVqk7FSmY\" data-type=\"youtube\"></div>\n</div>\n```\n```html\n<div class=\"plyr\">\n\t<div data-video-id=\"143418951\" data-type=\"vimeo\"></div>\n</div>\n```\n\n#### Cross Origin (CORS)\nYou'll notice the `crossorigin` attribute on the example `<video>` and `<audio>` elements. This is because the media is loaded from another domain. If your media is hosted on another domain, you may need to add this attribute.\n\nMore info on CORS here:\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n\n### Captions\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the `<track>` element.\n\nBe sure to [validate your caption files](https://quuz.org/webvtt/)\n\n### JavaScript\n\n#### Quick setup\n\nHere's an example of a default setup:\n\n```html\n<script src=\"https://cdn.plyr.io/1.6.4/plyr.js\"></script>\n<script>plyr.setup();</script>\n```\n\nThis will look for all elements with the specified container classname (default is `plyr`) and setup plyr on each element found. You can specify other options, including a different selector hook below. The container classname will be added to the specified element(s) if it is not already present (for the CSS).\n\nYou can initialize the player a few other ways:\n\nPassing a [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList):\n```javascript\nplyr.setup(document.querySelectorAll('.js-plyr'), options);\n```\n\nPassing a [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement):\n```javascript\nplyr.setup(document.querySelector('.js-plyr'), options);\n```\n\nPassing a [string selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll):\n```javascript\nplyr.setup('.js-plyr', options);\n```\n\nPassing just the options object:\n```javascript\nplyr.setup(options);\n```\n\n#### RangeTouch\nSome touch browsers (particularly Mobile Safari on iOS) seem to have issues with `<input type=\"range\">` elements whereby touching the track to set the value doesn't work and sliding the thumb can be tricky. To combat this, I've created [RangeTouch](https://rangetouch.com) which I'd recommend including in your solution. It's a tiny script with a nice benefit for users on touch devices. \n\n#### Options\n\nOptions must be passed as an object to the `setup()` method as above or as JSON in `data-plyr` attribute on each of your target elements (e.g. data-plyr='{ title: \"testing\" }') - note the single quotes encapsulating the JSON.\n\n<table class=\"table\" width=\"100%\">\n<thead>\n  <tr>\n    <th width=\"20%\">Option</th>\n    <th width=\"15%\">Type</th>\n    <th width=\"15%\">Default</th>\n    <th width=\"50%\">Description</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td><code>enabled</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Completely disable Plyr. This would allow you to do a User Agent check or similar to programmatically enable or disable Plyr for a certain UA. Example below.</td>\n  </tr>\n  <tr>\n    <td><code>html</code></td>\n    <td>String</td>\n    <td><code><a href=\"controls.md\">See controls.md</a></code></td>\n    <td>See <a href=\"controls.md\">controls.md</a> for more info on how the html needs to be structured.</td>\n  </tr>\n  <tr>\n    <td><code>controls</code></td>\n    <td>Array</td>\n    <td><code>[\"restart\", \"rewind\", \"play\", \"fast-forward\", \"current-time\", \"duration\", \"mute\", \"volume\", \"captions\", \"fullscreen\"]</code></td>\n    <td>Toggle which control elements you would like to display when using the default controls html. If you specify a <code>html</code> option, this is redundant. The default value is to display everything.</td>\n  </tr>\n  <tr>\n    <td><code>i18n</code></td>\n    <td>Object</td>\n    <td><code><a href=\"controls.md\">See controls.md</a></code></td>\n    <td>Used for internationalization (i18n) of the tooltips/labels within the buttons.</td>\n  </tr>\n  <tr>\n    <td><code>iconPrefix</code></td>\n    <td>String</td>\n    <td><code>icon</code></td>\n    <td>Specify the id prefix for the icons used in the default controls (e.g. \"icon-play\" would be \"icon\"). This is to prevent clashes if you're using your own SVG defs file but with the default controls. Most people can ignore this option.</td>\n  </tr>\n  <tr>\n    <td><code>iconUrl</code></td>\n    <td>String</td>\n    <td><code>null</code></td>\n    <td>Specify a relative path to the SVG sprite, hosted on the *same domain* as the page the player is hosted on. Using this menthod means no requirement for the AJAX sprite loading script. See the <a href=\"#svg\">SVG section</a> for more info.</td>\n  </tr>\n  <tr>\n    <td><code>debug</code></td>\n    <td>Boolean</td>\n    <td><code>false</code></td>\n    <td>Display debugging information on what Plyr is doing.</td>\n  </tr>\n  <tr>\n    <td><code>autoplay</code></td>\n    <td>Boolean</td>\n    <td><code>false</code></td>\n    <td>Autoplay the media on load. This is generally advised against on UX grounds. It is also disabled on iOS (an Apple limitation).</td>\n  </tr>\n  <tr>\n    <td><code>seekTime</code></td>\n    <td>Number</td>\n    <td><code>10</code></td>\n    <td>The time, in seconds, to seek when a user hits fast forward or rewind.</td>\n  </tr>\n  <tr>\n    <td><code>volume</code></td>\n    <td>Number</td>\n    <td><code>5</code></td>\n    <td>A number, between 1 and 10, representing the initial volume of the player.</td>\n  </tr>\n  <tr>\n    <td><code>clickToPlay</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Click (or tap) of the video container will toggle pause/play.</td>\n  </tr>\n  <tr>\n    <td><code>hideControls</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Hide video controls automatically after 2s of no mouse or focus movement, on control element blur (tab out), on playback start or entering fullscreen. As soon as the mouse is moved, a control element is focused or playback is paused, the controls reappear instantly.</td>\n  </tr>\n  <tr>\n    <td><code>showPosterOnEnd</code></td>\n    <td>Boolean</td>\n    <td><code>false</code></td>\n    <td>This will restore and *reload* HTML5 video once playback is complete. Note: depending on the browser caching, this may result in the video downloading again (or parts of it). Use with caution.</td>\n  </tr>\n  <tr>\n    <td><code>tooltips</code></td>\n    <td>Object</td>\n    <td><code>{ controls: false, seek: true }</code></td>\n    <td>\n\t\t<strong>controls</strong>: Display control labels as tooltips on :hover &amp; :focus (by default, the labels are screen reader only).\n\t\t<br><br>\n\t\t<strong>seek</strong>: Display a seek tooltip to indicate on click where the media would seek to.\n\t</td>\n  </tr>\n  <tr>\n    <td><code>duration</code></td>\n    <td>Number</td>\n    <td><code>null</code></td>\n    <td>Specify a custom duration.</td>\n  </tr>\n  <tr>\n    <td><code>displayDuration</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Displays the duration of the media on the \"metadataloaded\" event (on startup) in the current time display. This will only work if the `preload` attribute is not set to `none` (or is not set at all) and you choose not to display the duration (see <code>controls</code> option).</td>\n  </tr>\n  <tr>\n    <td><code>selectors</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>See <code>plyr.js</code> in <code>/src</code> for more info. You probably don't need to change any of these.</td>\n  </tr>\n  <tr>\n    <td><code>listeners</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>Allows early binding of event listeners to the controls. See <code>controls</code> above for list of controls and see <code>plyr.js</code> in <code>/src</code> for more info.</td>\n  </tr>\n  <tr>\n    <td><code>classes</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>Similar to above, these are the classes added to the player when state changes occur.</td>\n  </tr>\n  <tr>\n    <td><code>captions</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>One property <code>defaultActive</code> which toggles if captions should be on by default. The default value is <code>false</code>.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreen</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>See <a href=\"#fullscreen-options\">below</a></td>\n  </tr>\n  <tr>\n    <td><code>storage</code></td>\n    <td>Object</td>\n    <td>&mdash;</td>\n    <td>Two properties; <code>enabled</code> which toggles if local storage should be enabled (if the browser supports it). The default value is `true`. This enables storing user settings, currently it only stores volume but more will be added later. The second property <code>key</code> is the key used for the local storage. The default is <code>plyr_volume</code> until more settings are stored.</td>\n  </tr>\n </tbody>\n</table>\n\n#### Fullscreen options\n\n<table class=\"table\" width=\"100%\" id=\"fullscreen-options\">\n<thead>\n  <tr>\n    <th width=\"20%\">Option</th>\n    <th width=\"15%\">Type</th>\n    <th width=\"15%\">Default</th>\n    <th width=\"50%\">Description</th>\n  </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>enabled</code></td>\n      <td>Boolean</td>\n      <td><code>true</code></td>\n      <td>Toggles if fullscreen should be enabled (if the browser supports it).</td>\n    </tr>\n    <tr>\n      <td><code>fallback</code></td>\n      <td>Boolean</td>\n      <td><code>true</code></td>\n      <td>Enable a full viewport view for older browsers.</td>\n    </tr>\n    <tr>\n      <td><code>allowAudio</code></td>\n      <td>Boolean</td>\n      <td><code>false</code></td>\n      <td>Allow audio play to toggle fullscreen. This will be more useful later when posters are supported.</td>\n    </tr>\n  </tbody>\n</table>\n\n## API\n\n#### Fetching the plyr instance\nA `plyr` object is added to any element that Plyr is initialized on. You can then control the player by accessing methods in the `plyr` object.\n\nThere are two ways to access the instance, firstly you re-query the element container you used for setup (e.g. `.js-plyr`) like so:\n\n```javascript\nvar player = document.querySelector('.js-plyr').plyr;\n```\n\nOr you can use the returned object from your call to the setup method:\n\n```javascript\nvar player = plyr.setup('.js-plyr')[0];\n```\n\nThis will return an array of plyr instances setup, so you need to specify the index of the instance you want. This is less useful if you are setting up mutliple instances. You can listen for the `setup` [event](#events) documented below which will return each instance one by one, as they are setup (in the `plyr` key of the event object).\n\nOnce you have your instance, you can use the API methods below on it. For example to pause it:\n\n```javascript\nplayer.pause();\n```\n\nHere's a list of the methods supported:\n\n<table class=\"table\" width=\"100%\">\n<thead>\n  <tr>\n    <th width=\"20%\">Method</th>\n    <th width=\"15%\">Parameters</th>\n    <th width=\"65%\">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>play()</code></td>\n    <td>&mdash;</td>\n    <td>Plays the media</td>\n  </tr>\n  <tr>\n    <td><code>pause()</code></td>\n    <td>&mdash;</td>\n    <td>Pauses the media</td>\n  </tr>\n    <tr>\n    <td><code>restart()</code></td>\n    <td>&mdash;</td>\n    <td>Restarts playback</td>\n  </tr>\n  <tr>\n    <td><code>rewind(...)</code></td>\n    <td>Number</td>\n    <td>Rewinds by the provided parameter, in seconds. If no parameter is provided, the default seekInterval is used (10 seconds).</td>\n  </tr>\n  <tr>\n    <td><code>forward(...)</code></td>\n    <td>Number</td>\n    <td>Fast forwards by the provided parameter, in seconds. If no parameter is provided, the default seekInterval is used (10 seconds).</td>\n  </tr>\n  <tr>\n    <td><code>seek(...)</code></td>\n    <td>Number</td>\n    <td>Seeks the media to the provided parameter, time in seconds.</td>\n  </tr>\n  <tr>\n    <td><code>setVolume(...)</code></td>\n    <td>Number</td>\n    <td>Sets the player volume to the provided parameter. The value should be between 0 (muted) and 10 (loudest). If no parameter is provided, the default volume is used (5). Values over 10 are ignored.</td>\n  </tr>\n  <tr>\n    <td><code>togglePlay()</code></td>\n    <td>Boolean</td>\n    <td>Toggles playback for the player based on either the boolean argument or it's current state.</td>\n  </tr>\n  <tr>\n    <td><code>toggleMute()</code></td>\n    <td>&mdash;</td>\n    <td>Toggles mute for the player.</td>\n  </tr>\n  <tr>\n    <td><code>toggleCaptions()</code></td>\n    <td>&mdash;</td>\n    <td>Toggles whether captions are enabled.</td>\n  </tr>\n  <tr>\n    <td><code>toggleFullscreen()</code></td>\n    <td>Event</td>\n    <td>Toggles fullscreen. This can only be initiated by a user gesture due to browser security, i.e. a user event such as click.</td>\n  </tr>\n  <tr>\n    <td><code>isFullscreen()</code></td>\n    <td>&mdash;</td>\n    <td>Boolean returned if the player is in fullscreen.</td>\n  </tr>\n  <tr>\n    <td><code>support(...)</code></td>\n    <td>String</td>\n    <td>Determine if a player supports a certain MIME type. This is not supported for embedded content (YouTube).</td>\n  </tr>\n  <tr>\n    <td><code>source(...)</code></td>\n    <td>Object or undefined</td>\n    <td>\n      Get/Set the media source.\n      <br><br>\n      <strong>Object</strong><br>\n      See <a href=\"#source-method\">below</a>\n      <br><br>\n      <strong>YouTube</strong><br>\n      Currently this API method only accepts a YouTube ID when used with a YouTube player. I will add URL support soon, along with being able to swap between types (e.g. YouTube to Audio or Video and vice versa.)\n      <br><br>\n      <strong>undefined</strong><br>\n      Returns the current media source url. Works for both native videos and embeds.\n    </td>\n  </tr>\n  <tr>\n    <td><code>poster(...)</code></td>\n    <td>String</td>\n    <td>Set the poster url. This is supported for the <code>video</code> element only.</td>\n  </tr>\n  <tr>\n    <td><code>destroy()</code></td>\n    <td>&mdash;</td>\n    <td>Destroys the plyr UI and any media event listeners, effectively restoring to the previous state before <code>setup()</code> was called.</td>\n  </tr>\n  <tr>\n    <td><code>restore()</code></td>\n    <td>&mdash;</td>\n    <td>Reverses the effects of the <code>destroy()</code> method, restoring the UI and listeners.</td>\n  </tr>\n </tbody>\n</table>\n\n#### .source() method\n\nThis allows changing the plyr source and type on the fly.\n\nVideo example:\n\n```javascript\nplayer.source({\n  type:       'video',\n  title:      'Example title',\n  sources: [{\n      src:    '/path/to/movie.mp4',\n      type:   'video/mp4'\n  },\n  {\n      src:    '/path/to/movie.webm',\n      type:   'video/webm'\n  }],\n  poster:     '/path/to/poster.jpg',\n  tracks:     [{\n      kind:   'captions',\n      label:  'English',\n      srclang:'en',\n      src:    '/path/to/captions.vtt',\n      default: true\n  }]\n});\n```\n\nAudio example:\n\n```javascript\nplayer.source({\n  type:       'audio',\n  title:      'Example title',\n  sources: [{\n    src:      '/path/to/audio.mp3',\n    type:     'audio/mp3'\n  },\n  {\n    src:      '/path/to/audio.ogg',\n    type:     'audio/ogg'\n  }]\n});\n```\n\nYouTube example:\n\n```javascript\nplayer.source({\n  type:       'video',\n  title:      'Example title',\n  sources: [{\n      src:    'bTqVqk7FSmY',\n      type:   'youtube'\n  }]\n});\n```\n\nVimeo example\n\n```javascript\nplayer.source({\n  type:       'video',\n  title:      'Example title',\n  sources: [{\n      src:    '143418951',\n      type:   'vimeo'\n  }]\n});\n```\n\nSome more details on the object parameters\n\n<table class=\"table\" width=\"100%\">\n  <thead>\n    <tr>\n      <th width=\"20%\">Key</th>\n      <th width=\"15%\">Type</th>\n      <th width=\"65%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>type</code></td>\n      <td>String</td>\n      <td>Options are <code>video</code>, <code>audio</code>, <code>youtube</code> and <code>vimeo</code></td>\n    </tr>\n    <tr>\n      <td><code>title</code></td>\n      <td>String</td>\n      <td>Title of the new media. Used for the aria labelling.</td>\n    </tr>\n    <tr>\n      <td><code>sources</code></td>\n      <td>Array</td>\n      <td>This is an array of sources. <code>type</code> is optional for YouTube and Vimeo when specifying an array. For YouTube and Vimeo media, only the video ID must be passed as the source as shown above. The keys of this object are mapped directly to HTML attributes so more can be added to the object if required.</td>\n    </tr>\n    <tr>\n      <td><code>poster</code></td>\n      <td>String</td>\n      <td>URL for the poster image (video only).</td>\n    </tr>\n    <tr>\n      <td><code>tracks</code></td>\n      <td>Array</td>\n      <td>An array of track objects. Each element in the array is mapped directly to a track element and any keys mapped directly to HTML attributes so as in the example above, it will render as `<track kind=\"captions\" label=\"English\" srclang=\"en\" src=\"https://cdn.selz.com/plyr/1.0/example_captions_en.vtt\" default>`. Booleans are converted to HTML5 value-less attributes.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n## Events\n\nYou can listen for events on the element you setup Plyr on. Some events only apply to HTML5 audio and video.\n\n<table class=\"table\" width=\"100%\">\n  <thead>\n    <tr>\n      <th width=\"20%\">Event name</th>\n\t  <th width=\"20%\">HTML5 only</th>\n      <th width=\"60%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n\t<tr>\n\t\t<td><code>canplay</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when enough data is available that the media can be played, at least for a couple of frames. This corresponds to the <code>HAVE_ENOUGH_DATA</code> <code>readyState</code>.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>canplaythrough</code></td>\n\t\t<td></td>\n\t\t<td>Sent when the ready state changes to <code>CAN_PLAY_THROUGH</code>, indicating that the entire media can be played without interruption, assuming the download rate remains at least at the current level. <strong>Note</strong>: Manually setting the <code>currentTime</code> will eventually fire a <code>canplaythrough</code> event in firefox. Other browsers might not fire this event.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>emptied</code></td>\n\t\t<td>✔</td>\n\t\t<td>The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the <code>load()</code> method is called to reload it.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>ended</code></td>\n\t\t<td></td>\n\t\t<td>Sent when playback completes.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>error</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when an error occurs.&nbsp; The element's <code>error</code> attribute contains more information.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>loadeddata</code></td>\n\t\t<td>✔</td>\n\t\t<td>The first frame of the media has finished loading.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>loadedmetadata</code></td>\n\t\t<td>✔</td>\n\t\t<td>The media's metadata has finished loading; all attributes now contain as much useful information as they're going to.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>loadstart</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when loading of the media begins.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>pause</code></td>\n\t\t<td></td>\n\t\t<td>Sent when playback is paused.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>play</code></td>\n\t\t<td></td>\n\t\t<td>Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior <code>pause</code> event.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>playing</code></td>\n\t\t<td></td>\n\t\t<td>Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>progress</code></td>\n\t\t<td></td>\n\t\t<td>Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element's <code>buffered</code> attribute.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>seeked</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when a seek operation completes.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>seeking</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when a seek operation begins.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>stalled</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>timeupdate</code></td>\n\t\t<td></td>\n\t\t<td>The time indicated by the element's <code>currentTime</code> attribute has changed.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>volumechange</code></td>\n\t\t<td></td>\n\t\t<td>Sent when the audio volume changes (both when the volume is set and when the <code>muted</code> attribute is changed).</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>waiting</code></td>\n\t\t<td>✔</td>\n\t\t<td>Sent when the requested operation (such as playback) is delayed pending the completion of another operation (such as a seek).</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>enterfullscreen</code></td>\n\t\t<td></td>\n\t\t<td>User enters fullscreen (either the proper fullscreen or full-window fallback for older browsers)</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>exitfullscreen</code></td>\n\t\t<td></td>\n\t\t<td>User exits fullscreen</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>captionsenabled</code></td>\n\t\t<td></td>\n\t\t<td>Captions toggled on</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>captionsdisabled</code></td>\n\t\t<td></td>\n\t\t<td>Captions toggled off</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>ready</code></td>\n\t\t<td></td>\n\t\t<td>Triggered when initial setup is done or a source change has occurred.</td>\n\t</tr>\n\t</tbody>\n</table>\n\nDetails borrowed from: [https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events)\n\nHere's an example of binding an event listener:\n\n```javascript\ndocument.querySelector('.js-plyr').addEventListener('ready', function() {\n\tvar player = event.target.plyr;\n});\n```\n\n## Embeds\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Check the relevant documentation sections for any differences.\n\nPlyr references a custom version of the Vimeo Froogaloop API as Vimeo have neglected to maintain the library and there were bugs with their version. You don't need to worry about including your own versions of the Vimeo or YouTube JavaScript APIs.\n\nThe native API's can be accessed through the `embed` property of the plyr object. For example:\n\n```javascript\ndocument.querySelector('.js-plyr').addEventListener('ready', function() {\n\tvar player = event.target.plyr;\n\n\t// YouTube\n\tconsole.log(player.embed.getVideoData());\n\n\t// Vimeo\n\tconsole.log(player.embed.api('getColor'));\n});\n```\n\nMore info on the respective API's here:\n[YouTube API Reference](https://developers.google.com/youtube/js_api_reference)\n[Vimeo API Reference](https://developer.vimeo.com/player/js-api#reference)\n\n*Please note*: not all API methods may work 100%. Your mileage may vary. It's better to use the universal plyr API where possible.\n\n## Fullscreen\n\nFullscreen in Plyr is supported for all browsers that [currently support it](http://caniuse.com/#feat=fullscreen). If you're using the default CSS, you can also use a \"full browser\" mode which will use the full browser window by adding the `plyr-fullscreen` class to your container.\n\n## Browser support\n\n<table width=\"100%\" style=\"text-align: center\">\n  <thead>\n    <tr>\n      <td>Safari</td>\n      <td>Firefox</td>\n      <td>Chrome</td>\n      <td>Opera</td>\n      <td>IE9</td>\n      <td>IE10+</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>✔&sup1;</td>\n      <td>✔</td>\n      <td>✔</td>\n      <td>✔</td>\n      <td>API&sup2;</td>\n      <td>✔&sup3;</td>\n    </tr>\n  </tbody>\n</table>\n\n&sup1; Mobile Safari on the iPhone forces the native player for `<video>` so no useful customisation is possible. `<audio>` elements have volume controls disabled.\n\n&sup2; Native player used (no support for `<progress>` or `<input type=\"range\">`) but the API is supported (v1.0.28+)\n\n&sup3; IE10 has no native fullscreen support, fallback can be used (see options)\n\nThe `enabled` option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\n```javascript\nenabled: /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)\n```\nIf a User Agent is disabled but supports `<video>` and `<audio>` natively, it will use the native player.\n\nAny unsupported browsers will display links to download the media if the correct html is used.\n\n### Checking for support\nThere's an API method for checking support. You can call `plyr.supported()` and optionally pass a type to it, e.g. `plyr.supported(\"video\")`. It will return an object with two keys; `basic` meaning there's basic support for that media type (or both if no type is passed) and `full` meaning there's full support for plyr.\n\n## Issues\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\n## Author\nPlyr is developed by [@sam_potts](https://twitter.com/sam_potts) / [sampotts.me](http://sampotts.me) with help from the awesome [contributors](https://github.com/Selz/plyr/graphs/contributors)\n\n## Mentions\n- [The Changelog](http://thechangelog.com/plyr-simple-html5-media-player-custom-controls-webvtt-captions/)\n- [HTML5 Weekly #177](http://html5weekly.com/issues/177)\n- [Responsive Design #149](http://us4.campaign-archive2.com/?u=559bc631fe5294fc66f5f7f89&id=451a61490f)\n- [Web Design Weekly #174](https://web-design-weekly.com/2015/02/24/web-design-weekly-174/)\n- [Hacker News](https://news.ycombinator.com/item?id=9136774)\n- [Web Platform Daily](http://webplatformdaily.org/releases/2015-03-04)\n- [LayerVault Designer News](https://news.layervault.com/stories/45394-plyr--a-simple-html5-media-player)\n- [The Treehouse Show #131](https://teamtreehouse.com/library/episode-131-origami-react-responsive-hero-images)\n- [noupe.com](http://www.noupe.com/design/html5-plyr-is-a-responsive-and-accessible-video-player-94389.html)\n\n## Used by\n- [Selz.com](https://selz.com)\n- [koel - A personal music streaming server that works.](http://koel.phanan.net/)\n- [Oscar Radio](http://oscar-radio.xyz/)\n\nLet me know on [Twitter](https://twitter.com/sam_potts) I can add you to the above list. It'd be awesome to see how you're using Plyr :-)\n\n## Useful links and credits\nCredit to the PayPal HTML5 Video player from which Plyr's caption functionality is ported from:\n- [PayPal's Accessible HTML5 Video Player](https://github.com/paypal/accessible-html5-video-player)\n- The icons used in Plyr are [Vicons](https://dribbble.com/shots/1663443-60-Vicons-Free-Icon-Set) plus some ones I made\n- [An awesome guide for Plyr in Japanese!](http://syncer.jp/how-to-use-plyr-io) by [@arayutw](https://twitter.com/arayutw)\n\nAlso these links helped created Plyr:\n- [Media Events - W3.org](http://www.w3.org/2010/05/video/mediaevents.html)\n- [Styling the `<progress>` element - hongkiat.com](http://www.hongkiat.com/blog/html5-progress-bar/)\n\n## Copyright and License\n[The MIT license](license.md).\n",
  "readmeFilename": "readme.md",
  "_id": "plyr@1.6.4",
  "dist": {
    "shasum": "2339ca40c3755e8c32fdf296153c435a01c368aa"
  },
  "_from": "plyr@",
  "_resolved": "https://registry.npmjs.org/plyr/-/plyr-1.6.4.tgz"
}
